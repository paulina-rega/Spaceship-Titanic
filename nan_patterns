"""
Program importing Titanic data and visualising to see patterns to fill NaNs

"""
# Importing libraries 
import pandas as pd
import numpy as np

# Reading train file:
df = pd.read_csv('train.csv')
df2 = pd.read_csv('test.csv')

# Cabin - The cabin number where the passenger is staying. 
# Takes the form deck/num/side, 
# where side can be either P for Port or S for Starboard.



#-----HANDLING MISSING HOMEPLANET DATA BY ASSIGNING SAME PLANET BASED ON GROUP

def split_cabin_data (df):
    df['Cabin'] = df['Cabin'].astype(str)
    df['DeckNo'] = df['Cabin'].apply(lambda x: x[0] if x !='nan' else np.NaN)
    df['CabinNo'] = df['Cabin'].apply(
        lambda x: x[2:-2] if x !='nan' else np.NaN)
    df['Port'] = df['Cabin'].apply(lambda x: x[-1] if x !='nan' else np.NaN)
    df.drop(columns = 'Cabin', inplace = True)
    return df

def add_group_number (df):
    df['Group'] = df['PassengerId'].apply(lambda x: x[:4])
    return df

df = split_cabin_data(df)
df = add_group_number(df)
df2 = split_cabin_data(df2)
df2 = add_group_number(df2)

homeplanet_group = df.loc[
    :,['Group', 'HomePlanet']].dropna().drop_duplicates(subset=['Group'])

print
print(df.isnull().sum())
print(df2.isnull().sum())


def fill_HomePlanet_by_group (df):
    for index, row in df.iterrows():
        group = row['Group']
        group_list = homeplanet_group['Group'].to_list()
        if group in group_list:
            new_home_planet = homeplanet_group.loc[
                homeplanet_group['Group'] == group].iloc[0]['HomePlanet']
            df.at[index, 'HomePlanet'] = new_home_planet
        else:
            continue
    return df


df_homeplanet_na = df.loc[df['HomePlanet'].isna()]
df.loc[df['HomePlanet'].isna()] = fill_HomePlanet_by_group(df_homeplanet_na)


# Check why df2 HomePlanet if not filled
df2_homeplanet_na = df2.loc[df2['HomePlanet'].isna()]
df2.loc[df2['HomePlanet'].isna()] = fill_HomePlanet_by_group(df2_homeplanet_na)


print(df.isnull().sum())
print(df2.isnull().sum())


#-----------------------------------------------------



