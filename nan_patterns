"""
Program importing Titanic data and visualising to see patterns to fill NaNs

"""
# Importing libraries 
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Reading train file:
df = pd.read_csv('train.csv')
df2 = pd.read_csv('test.csv')

# Cabin - The cabin number where the passenger is staying. 
# Takes the form deck/num/side, 
# where side can be either P for Port or S for Starboard.



#-----HANDLING MISSING HOMEPLANET DATA BY ASSIGNING SAME PLANET BASED ON GROUP

def split_cabin_data (df):
    df['Cabin'] = df['Cabin'].astype(str)
    df['DeckNo'] = df['Cabin'].apply(lambda x: x[0] if x !='nan' else np.NaN)
    df['CabinNo'] = df['Cabin'].apply(
        lambda x: x[2:-2] if x !='nan' else np.NaN)
    df['Port'] = df['Cabin'].apply(lambda x: x[-1] if x !='nan' else np.NaN)
    df.drop(columns = 'Cabin', inplace = True)
    return df

def add_group_number (df):
    df['Group'] = df['PassengerId'].apply(lambda x: x[:4])
    return df

# splitting 'Cabin' number into 'Deck', 'Number' and 'Side'
df = split_cabin_data(df)
df = add_group_number(df)
df2 = split_cabin_data(df2)
df2 = add_group_number(df2)

homeplanet_group = df.loc[ 
    :,['Group', 'HomePlanet']].dropna().drop_duplicates(subset=['Group'])

homeplanet_group2 = df2.loc[
    :,['Group', 'HomePlanet']].dropna().drop_duplicates(subset=['Group'])

homeplanet_group = pd.concat([homeplanet_group, homeplanet_group2])



def fill_HomePlanet_by_group (df):
    for index, row in df.iterrows():
        group = row['Group']
        group_list = homeplanet_group['Group'].to_list()
        if group in group_list:
            new_home_planet = homeplanet_group.loc[
                homeplanet_group['Group'] == group].iloc[0]['HomePlanet']
            df.at[index, 'HomePlanet'] = new_home_planet
        else:
            continue
    return df


df_homeplanet_na = df.loc[df['HomePlanet'].isna()]
df.loc[df['HomePlanet'].isna()] = fill_HomePlanet_by_group(df_homeplanet_na)


df2_homeplanet_na = df2.loc[df2['HomePlanet'].isna()]
df2.loc[df2['HomePlanet'].isna()] = fill_HomePlanet_by_group(df2_homeplanet_na)


#-----------------------------------------------------


column_names = list(df.columns.values)
columns_set_to_plot = set()
col_to_remove = ['PassengerId', 'RoomService', 'FoodCourt', 'ShoppingMall', 
                 'Spa', 'VRDeck', 'Name', 'Group', 'CabinNo']

for i in col_to_remove:
    column_names.remove(i)

for col1 in column_names:
    for col2 in column_names:
        if col1 == col2:
            continue
        else:
            column_pair_to_add = tuple(sorted((col1, col2)))
            columns_set_to_plot.add(column_pair_to_add)
            
            
for pair in columns_set_to_plot:
    col1 = pair[0]
    col2 = pair[1]
    #df.plot(x = col1, y = col2)
    if (df[col1].dtype == 'object' and df[col2].dtype == 'object'):
        print("both objects")
        sns.histplot(binwidth=0.5, x=col1, hue=col2, data=df, stat="count", multiple="stack")
        plt.show()
        #write code to plot 
    elif (df[col1].dtype == 'object' and df[col2].dtype == 'bool'):
        print("1st object, 2nd bool")    
        print("------------------------------------------------------")
    elif (df[col1].dtype == 'object' and df[col2].dtype == 'float64'):
        df.plot(x=col1, y=col2) #sprawdz czy dzia≈Ça
        print('1st object, second float')
    elif (df[col1].dtype == 'bool' and df[col2].dtype == 'bool'):
        print('both bool')
        print("------------------------------------------------------")
    elif (df[col1].dtype == 'bool' and df[col2].dtype == 'object'):
        print('1st bool, 2nd object')
        print("------------------------------------------------------")
    elif (df[col1].dtype == 'bool' and df[col2].dtype == 'float64'):
        print('1st bool, 2nd float')  
        print("------------------------------------------------------")
    elif (df[col1].dtype == 'float64' and df[col2].dtype == 'bool'):
        print('1st float, 2nd bool')
        print("------------------------------------------------------")
    elif (df[col1].dtype == 'float64' and df[col2].dtype == 'object'):
        #df.plot.bar(x=col2, y=col1, stacked=True) # NOT WORKING
        print("------------------------------------------------------")
        print('1st float, 2nd object')
    elif (df[col1].dtype == 'float64' and df[col2].dtype == 'float64'):
        print('both float')
        print("------------------------------------------------------")
        df.plot.scatter(x = col1, y = col2)
    else:
        print("ERROR")
    

            
    

    
    
    
    
# make double caterogical data (no floats) and plot it)

# Home Planet and DeckNo is related!
    
    
    
    
