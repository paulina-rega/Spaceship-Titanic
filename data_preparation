
"""
Program importing Titanic data and preparing for ML algorithm

"""

import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
import missingno as msno



# reading file
df = pd.read_csv('train.csv').head(300)



# creating a list of venues to spend money in
types = df.dtypes
numeric_types = types[types=='float64'].drop('Age').index


# adding SpendingSum column to df
df['SpendingsSum'] = df[numeric_types].sum(axis = 1)

#plotting spending for passengers by venue
for i in numeric_types:
    df.plot.scatter(x='Age', y=i)

# plotting spendings for passengers in CryoSleep (all are zeros):
df_cryo_sleep  = df[df['CryoSleep']==True]
for i in numeric_types:
    plot_title = "Passengers in 'CryoSleep' state spending in " + i
    df_cryo_sleep.plot.scatter(x='Age', y=i, ylim = (0, 100), title=plot_title) 



# filling CryoSleeping passengers spendings to zero 
df.loc[(df['CryoSleep']==True), numeric_types] = 0


# Filling passengers 'CryoSleep' NaNs Based on spendings 
# (no spendings - 'CryoSllep' is True, some spendings - 'CryoSleep' is False )
df_nan_sleep = df[df['CryoSleep'].isna()]
df_nan_sleep.loc[(df_nan_sleep['SpendingsSum'] > 0), 'CryoSleep'] = False
df_nan_sleep.loc[(df_nan_sleep['SpendingsSum'] <= 0), 'CryoSleep'] = True
df.loc[df_nan_sleep.index, :] = df_nan_sleep[:] 





#mean spendings in venues based on age:
ages = df['Age'].dropna().unique()
ages = np.sort(ages)
ages_expenses = pd.DataFrame({}, index = ages)



for i in numeric_types:
    ages_expenses[i]=0
    df[i] = df[i].astype(float)



# Creating Spending Mean 

for current_age in ages:
    print('\n')
    df_current_age = df[((df['Age'] == current_age) & 
                         (df['CryoSleep']== False))]
    print(df_current_age.head(3))
    if df_current_age.empty:
        continue
    for current_num_type in numeric_types:
        print((df_current_age[current_num_type].mean()))
        if df_current_age[current_num_type].isnull().all():
            # skip calculating the mean if the is no data
            continue
        mean_spending = int(df_current_age[current_num_type].mean(
            skipna = True))
        print('For age ' + str(current_age) + ' in ' + current_num_type +
              ' mean spending is: ' + str(mean_spending))
        ages_expenses.loc[current_age, current_num_type] = mean_spending
    
    
#creating mean spendings for groups based on age:
ages_spending_groups = [0, 13, 23, 33, 43, 53, 53, 63, 200]
rows_number = len(ages_spending_groups)
columns_number = len(numeric_types)


data_df_spending_by_age_groups = pd.DataFrame(
    np.zeros((rows_number, columns_number)), columns = numeric_types, 
    index = ages_spending_groups)

ages_expenses.reset_index(inplace=True)
ages_expenses = ages_expenses.rename(columns = {'index':'Age'})
for i in range(len(ages_spending_groups) - 1):
    beginning_of_age_range = ages_spending_groups[i]
    ending_of_age_range = ages_spending_groups[i+1]
    df_temp_age_range = ages_expenses[(ages_expenses['Age'] >= beginning_of_age_range)
                                       & (ages_expenses['Age'] < ending_of_age_range)]
    for numeric_type in numeric_types: 
        temp_mean = df_temp_age_range[numeric_type].mean()
        data_df_spending_by_age_groups.at[beginning_of_age_range, numeric_type] = temp_mean
    






# TODO: apply it to test dataset
